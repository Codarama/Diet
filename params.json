{"name":"Diet","tagline":"Diet significantly minimizes the space used by your project's /lib ","body":"Diet\r\n======\r\n\r\nDiet tries to create a jar from all of the jars used by a project.\r\nThe Diet jar should contain only classes the project actually uses, nothing else.\r\n\r\nThis is currently just a library, but it should [evolve to a Maven plugin](https://github.com/amaranthius/facade-maven) and perhaps a web project.\r\n\r\n## Features\r\n\r\n### Source Dependency Resolution\r\n\r\nDiet can resolve the dependencies of .java source files. \r\nCurrently like this:\r\n\r\n```java\r\nfinal Set<ClassName> dependencies = Dependencies\r\n    .ofSource(SourceFile.fromFilepath(\"/abs/path/to/Source.java\"))\r\n    .set();\r\n```\r\n\r\n### Binary Class Dependency Resolution\r\n\r\nDiet can also resolve the dependencies of compiled binary .class files:\r\n\r\n```java\r\nfinal Set<ClassName> dependencies = Dependencies\r\n    .ofClass(ClassFile.fromFilepath(\"/abs/path/to/Class.class\"))\r\n    .set();\r\n```\r\n\r\nThe `Dependencies` API can also work with the classpath or with Core API `File` objects (no streams yet though).\r\nFor more info on the `Dependencies` API have [a look at the wiki](https://github.com/ayld/Facade/wiki/Dependencies-API).\r\n\r\n### Library minimization\r\n\r\nThis will try to find all the 'actual dependencies' that a set of sources use, package them in a Jar and return it.\r\n\r\n```java\r\nfinal JarFile outJar = Minimizer\r\n    .sources(\"/abs/path/to/src/dir\")\r\n    .libs(\"/abs/path/to/libs\") // this can also be a Maven ~/.m2/repository\r\n    .getJar();\r\n```\r\n\r\nYou can also set the output dir for the minimizer, have [a look at the wiki](https://github.com/ayld/Facade/wiki/Library-Minimization) for info.\r\n\r\n### Component Events\r\n\r\nDiet can notify you for updates on what it is currently doing. For instanse if you want to get detailed info while \r\nresolving the dependencies of a binary class you can:\r\n\r\n```java\r\nListenerRegistrar.listeners(new Object() {\r\n\t\t\t\r\n    @Subscribe\r\n\tpublic void listenOnStart(ClassDependencyResolutionStartEvent e) {\r\n\t    // this will be called when the resolution starts\r\n\t}\r\n\t\t\t\r\n\t@Subscribe\r\n\tpublic void listenOnEnd(ClassDependencyResolutionEndEvent e) {\r\n\t    // this will be called when the resolution ends\r\n\t}\r\n}).register();\r\n```\r\n\r\nThere is a whole hierarchy of events you can listen to, there is [a wiki page](https://github.com/ayld/Facade/wiki/Component-Events-and-Listeners) on this also.\r\n\r\n## Usage\r\n\r\nIn order to use the library you can either:\r\n\r\n * [Download the latest binary .jar](https://github.com/ayld/Facade/releases/tag/v0.6-alpha.1), \r\nin which case you will also need the dependencies. You can either find them [in the POM](https://github.com/ayld/Facade/blob/master/pom.xml),\r\nor download them from [the dependencies project](https://github.com/ayld/facade-dependencies).\r\n * Build [the latest tag](https://github.com/ayld/Facade/releases/tag/v0.6-alpha.1) with [Maven 3.x](http://maven.apache.org/). Just\r\nclone it and run `mvn clean install` in your local copy. This way Maven will get the dependencies for you.\r\n\r\nYou can also build the master branch (on your own risk) in the same way you build the latest tag.\r\n\r\n\r\n## Notes\r\n\r\nKeep in mind that we're currently in very early alpha and the API changes constantly and can change dramatically :)\r\nAlso wildcard imports in source files like `import com.something.*;` are currently not supported. So calling source\r\ndependency resolution on such a file or on a set containing one will result in an exception.\r\n","google":"UA-45172784-1","note":"Don't delete this file! It's used internally to help with page regeneration."}