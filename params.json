{"name":"Facade","tagline":"Facade significantly minimizes the space used by your project's /lib ","body":"[![Build Status](https://travis-ci.org/ayld/Facade.png?branch=master)](https://travis-ci.org/ayld/Facade)\r\n\r\nFacade\r\n======\r\n\r\nFacade tries to create a jar from all of the jars used by a project.\r\nThe facade jar should contain only classes the project actually uses, nothing else.\r\n\r\nThis is currently just a library, but it should evolve to a Maven plugin and perhaps a web project.\r\n\r\n## Features\r\n\r\n### Source Dependency Resolution\r\n\r\nFacade can resolve the dependencies of .java source files. \r\nCurrently like this:\r\n\r\n```java\r\nfinal Set<ClassName> dependencies = Dependencies\r\n    .ofSource(SourceFile.fromFilepath(\"/abs/path/to/Source.java\"))\r\n    .set();\r\n```\r\n\r\n### Binary Class Dependency Resolution\r\n\r\nFacade can also resolve the dependencies of compiled binary .class files:\r\n\r\n```java\r\nfinal Set<ClassName> dependencies = Dependencies\r\n    .ofClass(ClassFile.fromFilepath(\"/abs/path/to/Class.class\"))\r\n    .set();\r\n```\r\n\r\nThe `Dependencies` API can also work with the classpath or with Core API `File` objects (no streams yet though).\r\nFor more info on the `Dependencies` API have [a look at the wiki](https://github.com/ayld/Facade/wiki/Dependencies-API).\r\n\r\n### Library minimization\r\n\r\nThis will try to find all the 'actual dependencies' that a set of sources use, package them in a Jar and return it.\r\n\r\n```java\r\nfinal JarFile outJar = LibraryMinimizer\r\n    .forSourcesAt(\"/abs/path/to/src/dir\")\r\n    .withLibs(\"/abs/path/to/libs\") // this can also be a Maven ~/.m2/repository\r\n    .getFile();\r\n```\r\n\r\nYou can also set the output dir for the minimizer, have a look at the wiki for info.\r\n\r\n### Component Events\r\n\r\nFacade can notify you for updates on what it is currently doing. For instanse if you want to get detailed info while \r\nresolving the dependencies of a binary class you can:\r\n\r\n```java\r\nListenerRegistrar.listeners(new Object() {\r\n\t\t\t\r\n    @Subscribe\r\n\tpublic void listenOnStart(ClassDependencyResolutionStartEvent e) {\r\n\t    // this will be called when the resolution starts\r\n\t}\r\n\t\t\t\r\n\t@Subscribe\r\n\tpublic void listenOnEnd(ClassDependencyResolutionEndEvent e) {\r\n\t    // this will be called when the resolution ends\r\n\t}\r\n}).register();\r\n```\r\n\r\nThere is a whole hierarchy of events you can listen to, there is [a wiki page](https://github.com/ayld/Facade/wiki/Component-Events-and-Listeners) on this also.\r\n\r\n## Notes\r\n\r\nKeep in mind that we're currently in very early alpha and the API changes constantly and can change dramatically :)\r\nAlso wildcard imports in source files like `import com.something.*;` are currently not supported. So calling source\r\ndependency resolution on such a file or on a set containing one will result in an exception.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}